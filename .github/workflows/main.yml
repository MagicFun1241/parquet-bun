name: Main

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: arm64
          - os: ubuntu-latest
            arch: amd64
          - os: ubuntu-latest
            arch: arm64
          - os: windows-latest
            arch: arm64
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Download Go modules
      run: cd native && go mod download

    - name: Build Linux
      if: startsWith(matrix.os, 'ubuntu') && !startsWith(matrix.arch, 'arm')
      env:
        CGO_ENABLED: 1
        GOOS: linux
        GOARCH: amd64
      run: |
        cd native
        go build -ldflags "-s" -o parquet-amd64.so -buildmode=c-shared .

    - name: Build Linux Arm64
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.arch, 'arm')
      env:
        CGO_ENABLED: 1
        GOOS: linux
        GOARCH: arm64
        CC: aarch64-linux-gnu-gcc
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu
        cd native
        go build -ldflags "-s" -o parquet-arm64.so -buildmode=c-shared .

    - name: Build Windows
      if: startsWith(matrix.os, 'windows')
      env:
        CGO_ENABLED: 1
      run: |
        cd native
        go build -ldflags "-s" -o parquet-arm64.dll -buildmode=c-shared .
        $Env:GOARCH = "amd64"
        go build -ldflags "-s" -o parquet-amd64.dll -buildmode=c-shared .
       
    - name: Build Darwin
      if: startsWith(matrix.os, 'macos')
      env:
        CGO_ENABLED: 1
        GOOS: darwin
      run: |
        cd native
        GOARCH=amd64 go build -ldflags "-s" -o parquet-amd64.dylib -buildmode=c-shared .
        GOARCH=arm64 go build -ldflags "-s" -o parquet-arm64.dylib -buildmode=c-shared .

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.os }}-${{ matrix.arch }}
        path: | 
          native/*.so
          native/*.dylib
          native/*.dll
        if-no-files-found: error

  github-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: release

    - name: Get package version
      id: get_version
      run: |
        VERSION=$(jq -r .version package.json)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
        GLIBC_VERSION=$(ldd release/build-artifacts-ubuntu-latest-amd64/parquet-amd64.so | grep 'libc.so.6' | awk '{print $3}' | xargs strings | grep GLIBC)
        echo "Supported glibc versions $GLIBC_VERSION"
        
        {
            echo 'GLIBC_VERSION<<EOF'
            echo $GLIBC_VERSION
            echo EOF
        } >> "$GITHUB_ENV"

    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: ncipollo/release-action@v1
      with:
        artifacts: "release/**"
        tag: v${{ env.VERSION }}

  npm-release:
    needs: github-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: oven-sh/setup-bun@v2
    - run: |
        bun install --ignore-scripts --frozen-lockfile
        bun run build
        cp src/scripts/postinstall.ts dist

    - run: | 
        export NPM_TOKEN=${{ secrets.NPM_TOKEN }}
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc 
        echo "//registry.npmjs.org/:_auth=${{ secrets.NPM_TOKEN }}" >> .npmrc
        echo "registry=https://registry.npmjs.org/" >> .npmrc
        echo email=${{ secrets.EMAIL }} >> .npmrc
        echo always-auth=true >> .npmrc
        bunx npm publish --access public
