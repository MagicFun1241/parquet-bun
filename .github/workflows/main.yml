name: Main

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: arm64
          - os: ubuntu-latest
            arch: amd64
          - os: ubuntu-latest
            arch: arm64

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Download Go modules
      run: cd native && go mod download

    - name: Build Linux
      if: startsWith(matrix.os, 'ubuntu') && !startsWith(matrix.arch, 'arm')
      run: |
        cd native
        export CGO_ENABLED=1
        GOOS=linux GOARCH=amd64 go build -ldflags "-s" -o parquet-amd64.so -buildmode=c-shared .

    - name: Build Linux Arm64
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.arch, 'arm')
      run: |
        apt-get install -y gcc-aarch64-linux-gnu
        cd native
        export CGO_ENABLED=1
        export CC=aarch64-linux-gnu-gcc
        GOOS=linux GOARCH=arm64 go build -ldflags "-s" -o parquet-arm64.so -buildmode=c-shared .
       
    - name: Build Darwin
      if: startsWith(matrix.os, 'macos')
      run: |
        cd native
        export CGO_ENABLED=1
        GOOS=darwin GOARCH=amd64 go build -ldflags "-s" -o parquet-amd64.dylib -buildmode=c-shared .
        GOOS=darwin GOARCH=arm64 go build -ldflags "-s" -o parquet-arm64.dylib -buildmode=c-shared .

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.os }}-${{ matrix.arch }}
        path: | 
          native/*.so
          native/*.dylib
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: release

    - name: Get package version
      id: get_version
      run: |
        pwd
        ls
        VERSION=$(jq -r .version package.json)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: ncipollo/release-action@v1
      with:
        artifacts: "release/**"
        tag: v${{ env.VERSION }}
